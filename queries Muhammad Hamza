-- task 1
SELECT products.productName AS Product_Name,products.productLine AS Product_line FROM products 

-- task 2
SELECT customers.customerNumber,customers.customerName, COUNT(orders.orderNumber) AS total_orders
FROM customers
JOIN orders ON customers.customerNumber = orders.customerNumber
GROUP BY customers.customerNumber
ORDER BY COUNT(orders.orderNumber) DESC;


-- task 3
SELECT customers.customerName, SUM(payments.amount) AS total_payment
FROM customers
LEFT JOIN payments
ON customers.customerNumber = payments.customerNumber
GROUP BY payments.customerNumber;


-- task 4 
SELECT products.productName, COUNT(orderdetails.quantityOrdered) AS number_of_orders 
FROM products 
LEFT JOIN orderdetails 
ON products.productCode = orderdetails.productCode
GROUP BY (orderdetails.quantityOrdered) DESC;

-- task 5

-- task 6
SELECT customers.customerNumber,customers.customerName, COUNT(orders.orderNumber) AS total_orders
FROM customers
INNER JOIN orders ON customers.customerNumber = orders.customerNumber
GROUP BY customers.customerNumber
ORDER BY COUNT(orders.orderNumber) DESC;

-- task 7
SELECT c.city, AVG(p.amount) AS average_salary FROM customers c
JOIN payments p on c.customerNumber = p.customerNumber
GROUP BY c.city
HAVING average_salary > 1000

-- task 8

SELECT products.productName, SUM(orderdetails.quantityOrdered) AS ordered
FROM products
JOIN orderdetails ON products.productCode = orderdetails.productCode
GROUP BY products.productCode, products.productName

-- task 9
SELECT DISTINCT employees.firstName AS EMPLOYESS FROM
employees
LEFT JOIN customers ON customers.salesRepEmployeeNumber= employees.employeeNumber
INNER JOIN offices
ON
employees.officeCode= offices.officeCode
WHERE customers.salesRepEmployeeNumber
-- SELECT employees.firstName, employees.employeeNumber
-- FROM employees
-- LEFT JOIN customers 
-- ON employees.employeeNumber = customers.salesRepEmployeeNumber
-- WHERE customers.customerNumber IS NULL AND customers.country = 'USA'


-- task 16
SELECT COUNT(employees.employeeNumber) AS numberOfEmployee, offices.city
FROM offices
LEFT JOIN
employees 
ON offices.officeCode = employees.officeCode
GROUP BY offices.officeCode

-- task 11
-- Calculate the total revenue generated by each product line, considering all orders and their details.
SELECT productlines.productLine, SUM(orderdetails.priceEach)
FROM productlines
INNER JOIN products
ON productlines.productLine = products.productLine
RIGHT JOIN orderdetails
ON products.productCode = orderdetails.productCode
GROUP BY productlines.productLine

-- task 13

SELECT employees.firstName, customers.customerName
FROM employees
RIGHT JOIN customers
ON employees.employeeNumber = customers.salesRepEmployeeNumber;

-- task 17
SELECT productlines.productLine, SUM(payments.amount) AS payment 
FROM productlines
JOIN products
ON productlines.productLine = products.productLine
JOIN orderdetails
ON products.productCode = orderdetails.productCode
JOIN orders
ON orderdetails.orderNumber = orders.orderNumber
JOIN customers
ON orders.customerNumber = customers.customerNumber
JOIN payments
ON customers.customerNumber = payments.customerNumber
GROUP BY products.productLine
ORDER BY SUM(payments.amount) DESC;

-- task 5
SELECT DISTINCT employees.firstName  from employees LEFT JOIN customers
on customers.salesRepEmployeeNumber = employees.employeeNumber WHERE customers.salesRepEmployeeNumber IS NULL;

-- task 10
SELECT products.productName, COUNT(orderdetails.orderNumber) AS numberOfOrders
FROM orderdetails
JOIN products 
ON orderdetails.productCode = products.productCode
JOIN orders 
ON orderdetails.orderNumber = orders.orderNumber
JOIN customers 
ON customers.customerNumber = orders.customerNumber

WHERE customers.country = "USA"
GROUP BY products.productName
ORDER BY COUNT(orderdetails.orderNumber) DESC;

-- task 15
-- Find the names of customers who have made payments and display their payment details (payment date and amount) alongside customers who have not made any     -- payments

SELECT customers.customerName, payments.amount,payments.paymentDate, payments.checkNumber
FROM customers
LEFT JOIN payments
ON customers.customerNumber = payments.customerNumber
GROUP BY customers.customerName;

-- task 14
-- Display the product names and their corresponding product lines, showing all product lines even if there are no products in them.
SELECT products.productName,productlines.productLine
from products  
RIGHT JOIN productlines 
on productlines.productLine=products.productLine;

-- Retrieve the names of customers who have placed at least one order, including their order numbers and payment amounts, sorted by customer name.
-- task 12

SELECT customers.customerName, COUNT(orders.orderNumber), orders.orderNumber, SUM(orderdetails.quantityOrdered * orderdetails.priceEach) AS totalPayment
FROM customers
JOIN orders ON customers.customerNumber = orders.customerNumber
JOIN orderdetails ON orders.orderNumber = orderdetails.orderNumber
GROUP BY customers.customerNumber, orders.orderNumber
HAVING COUNT(orderdetails.orderNumber) >= 1
ORDER BY customers.customerName ASC, orders.orderNumber ASC;

-- TASK 18
UPDATE customers
INNER JOIN (
    SELECT customerNumber, SUM(amount) AS total_amount
    FROM payments
    GROUP BY customerNumber
) AS payment_totals ON customers.customerNumber = payment_totals.customerNumber
SET customers.creditLimit =
    CASE
        WHEN payment_totals.total_amount > 1000 THEN ROUND(customers.creditLimit * 1.1)
        ELSE CASE
                WHEN customers.creditLimit > 50000 THEN 50000
                ELSE customers.creditLimit
            END
    END;

-- task 19
UPDATE products
SET products.MSRP =
    CASE
     WHEN products.productLine = "Motorcycles" THEN ROUND(products.MSRP - (products. MSRP*0.15))
        ELSE CASE
                WHEN products.productLine = "Ships" THEN ROUND(products.MSRP-(products. MSRP* 0.20))
                ELSE products.MSRP
            END
    END;